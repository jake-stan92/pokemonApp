import og151 from "../assets/og151";
import { useEffect, useState, useCallback, useMemo } from "react";
import type { SinglePokemon } from "../components/GameContainerTypes";
import type { GameEndQuoteGroup } from "./NormalGameModes";

function NormalGameMode() {
  // Limit pool for testing â€” change slice size as needed
  const allPokemon: SinglePokemon[] = og151; // must be at least 4 for multiple options portion of test

  const gameEndQuotes: GameEndQuoteGroup[] = useMemo(
    () => [
      {
        minScorePercent: 0,
        maxScorePercent: 0.25,
        quotes: [
          "Looks like your PokÃ© Balls need some practice. Keep training, Trainer!",
          "Donâ€™t give up! Even Ash had to start somewhere.",
          "Your PokÃ©mon might be shaking in their bootsâ€¦ but so is your confidence!",
          "Time to head back to Professor Oakâ€™s lab for some study.",
          "Every Master was once a beginner â€” your journeyâ€™s just starting.",
        ],
      },
      {
        minScorePercent: 0.25,
        maxScorePercent: 0.5,
        quotes: [
          "Not bad, Trainer â€” youâ€™re catching on! Keep your PokÃ©dex ready.",
          "Youâ€™ve got some spark! With more training, youâ€™ll be unstoppable.",
          "Halfway there! Time to level up and show them what youâ€™ve got.",
          "A good start! Now itâ€™s time to power up your team.",
          "Your PokÃ©mon believe in you â€” now itâ€™s time to believe in yourself.",
        ],
      },
      {
        minScorePercent: 0.5,
        maxScorePercent: 0.75,
        quotes: [
          "Great job, Trainer! Your skills are evolving fast.",
          "Strong, smart, and ready for the next challenge!",
          "Youâ€™ve got the heart of a Champion â€” keep battling forward!",
          "Youâ€™re becoming a true PokÃ©mon Trainer. The Elite Four will be next!",
          "Your PokÃ©dex is filling up nicely â€” keep up the good work!",
        ],
      },
      {
        minScorePercent: 0.75,
        maxScorePercent: 0.99,
        quotes: [
          "Impressive! Youâ€™re almost a PokÃ©mon Master!",
          "The PokÃ©mon League wonâ€™t know what hit them!",
          "Your PokÃ©mon trust you â€” and so do we. Keep pushing forward!",
          "Your journey is legendary â€” just a few steps from greatness.",
          "Youâ€™ve caught them allâ€¦ almost. The Hall of Fame awaits!",
        ],
      },
      {
        minScorePercent: 0.99,
        maxScorePercent: 1,
        quotes: [
          "Congratulations, PokÃ©mon Master! The world is your PokÃ© Ball!",
          "Youâ€™ve caught them all! A true Champion among Trainers.",
          "Legendary status achieved â€” the PokÃ©mon League salutes you!",
          "The ultimate Trainer! Your name will be remembered in Kanto forever.",
          "PokÃ©mon Master confirmed. The adventure never ends!",
        ],
      },
    ],
    [],
  );

  const [remainingPokemon, setRemainingPokemon] = useState<SinglePokemon[]>([]);
  const [activePokemon, setActivePokemon] = useState<SinglePokemon | null>(
    null,
  );
  const [allAnswers, setAllAnswers] = useState<SinglePokemon[]>([]);
  const [selectedAnswer, setSelectedAnswer] = useState<string>("");
  const [gameStarted, setGameStarted] = useState<boolean>(false);
  const [gameCompleted, setGameCompleted] = useState<boolean>(false);
  const [gameOver, setGameOver] = useState<boolean>(false);
  const [score, setScore] = useState<number>(0);
  const [gameEndQuote, setGameEndQuote] = useState<string>("");

  const startGame = () => {
    if (allPokemon.length < 4) {
      alert("You need at least 4 PokÃ©mon to play!");
      return;
    }
    setGameOver(false);
    setGameCompleted(false);
    setGameStarted(true);
    setScore(0);
    setSelectedAnswer("");
    setAllAnswers([]);
    setActivePokemon(null);
    setRemainingPokemon([...allPokemon]); // reset the pool
    setGameEndQuote("");
  };

  const playRound = useCallback(
    // use callback avoids func being re-created each render -- react remembers it
    (pokemonPool: SinglePokemon[]) => {
      if (pokemonPool.length === 0) {
        return;
      }

      const randomIndex = Math.floor(Math.random() * pokemonPool.length);
      const chosenPokemon = pokemonPool[randomIndex];

      setActivePokemon(chosenPokemon);
      setRemainingPokemon(
        pokemonPool.filter((p) => p.name !== chosenPokemon.name),
      );

      // Create 3 incorrect answers
      const incorrectAnswers: SinglePokemon[] = [];
      while (incorrectAnswers.length < 3) {
        const candidate =
          allPokemon[Math.floor(Math.random() * allPokemon.length)];
        if (
          candidate.name !== chosenPokemon.name &&
          !incorrectAnswers.some((p) => p.name === candidate.name)
        ) {
          incorrectAnswers.push(candidate);
        }
      }

      const options = [chosenPokemon, ...incorrectAnswers];

      // Shuffle answers (fisher yates shuffle)
      for (let i = options.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [options[i], options[j]] = [options[j], options[i]];
      }

      setAllAnswers(options);
    },
    [allPokemon],
  );

  // On game start or after correct guess
  useEffect(() => {
    if (gameStarted && remainingPokemon.length > 0 && !activePokemon) {
      playRound(remainingPokemon);
    }
    // check game won/completed
    if (
      gameStarted &&
      remainingPokemon.length === 0 &&
      activePokemon === null
    ) {
      const randomQuoteIndex = Math.floor(
        Math.random() * gameEndQuotes[4].quotes.length,
      );
      const quote = gameEndQuotes[4].quotes[randomQuoteIndex];
      setGameEndQuote(quote);
      setGameCompleted(true);
      setGameStarted(false);
    }
  }, [gameStarted, remainingPokemon, activePokemon, playRound, gameEndQuotes]);

  // Handle user's answer
  useEffect(() => {
    if (!selectedAnswer || !activePokemon) return;

    if (selectedAnswer === activePokemon.name) {
      // add 1 for correct answer
      setScore((prevScore) => prevScore + 1);
      setSelectedAnswer(""); // Clear for next round
      setActivePokemon(null); // Triggers next round
    } else {
      // end round if incorrect answer given
      setGameOver(true);
      setGameStarted(false);
      const percentScore = score / allPokemon.length;

      const quoteGroup =
        gameEndQuotes.find(
          (group) =>
            percentScore >= group.minScorePercent &&
            percentScore < group.maxScorePercent,
        ) ?? gameEndQuotes[0];

      const randomQuoteIndex = Math.floor(
        Math.random() * quoteGroup.quotes.length,
      );
      const quote = quoteGroup.quotes[randomQuoteIndex];
      setGameEndQuote(quote);
    }
  }, [selectedAnswer, activePokemon, score, allPokemon.length, gameEndQuotes]);

  return (
    <>
      <h1>Normal Game Mode</h1>

      {!gameStarted && !gameOver && !gameCompleted && (
        <button onClick={startGame}>Start Game</button>
      )}

      {gameStarted && activePokemon && (
        <>
          <p>Score: {score}</p>
          <p>Who's that PokÃ©mon?</p>
          <img src={activePokemon.spriteFront} alt="Pokemon" />
          <div>
            {allAnswers.map((answer, index) => (
              <button
                key={index}
                onClick={() => setSelectedAnswer(answer.name)}
                disabled={!!selectedAnswer}
              >
                {answer.name}
              </button>
            ))}
          </div>
        </>
      )}

      {gameOver && (
        <>
          <h2>Game Over!</h2>
          <p>The correct answer was: {activePokemon!.name.toUpperCase()}</p>
          <p>Your final score: {score}</p>
          <p>{gameEndQuote}</p>
          <button onClick={startGame}>Play Again</button>
        </>
      )}

      {gameCompleted && (
        <>
          <h2>ðŸŽ‰ You did it!</h2>
          <p>You correctly guessed all {allPokemon.length} PokÃ©mon!</p>
          <p>Final Score: {score}</p>
          <p>{gameEndQuote}</p>
          <button onClick={startGame}>Play Again</button>
        </>
      )}
    </>
  );
}

export default NormalGameMode;
